import sys
import sys
import platform

#######################################################
# reusable functions and data structures
#######################################################

# Platform to Target Map (specifies which default target to build on a platform)
PLATFORM_TO_TARGET_MAP = { 
    'linux-i386'   : 'x86-unknown-linux',
    'linux-x86_64' : 'x86_64-unknown-linux',
    'linux2'       : 'x86-unknown-linux',
    'win32'        : 'x86-microsoft-win32',
    'cygwin'       : 'x86-unknown-cygwin',
    'darwin'       : 'universal-apple-macos'
}
    
CROSS_PLATFORMS = ['ppu-sony-ps3', 
                   'arm-unknown-linux', 
                   'mips-unknown-linux', 
                   'powerpc-unknown-linux', 
                   'arm-gp2x-linux',
                   'x86-unknown-mingw']

def DefaultTarget():
    platform_id = sys.platform
    if platform.system() == 'Linux':
        if (platform.machine() == 'i386' or
            platform.machine() == 'i486' or
            platform.machine() == 'i586' or
            platform.machine() == 'i686'):
            platform_id = 'linux-i386'
        if (platform.machine() == 'x86_64'):
            platform_id = 'linux-x86_64'
    
    if PLATFORM_TO_TARGET_MAP.has_key(platform_id):
        return PLATFORM_TO_TARGET_MAP[platform_id]
    else:
        return None
        
#######################################################
# Main Build
#######################################################

options = Options()
options.AddOptions(
    EnumOption('target', 'Build Target', DefaultTarget(), allowed_values=PLATFORM_TO_TARGET_MAP.values()+CROSS_PLATFORMS),
    BoolOption('enable_profiling', 'Enable Profiling', False),
    ListOption('build_config', 'Build Configuration(s)', 'Debug', names=['Debug', 'Release'])
)

env = Environment(options=options)
Help(options.GenerateHelpText(env))

### call the actual build script for each build config
for build_config in env['build_config']:
    env['build_config'] = build_config
    print '********** Configuring Build Target =', env['target'], '/', build_config, '********'  
    SConscript('Build.scons', build_dir='Targets/'+env['target']+'/'+build_config, exports='env', duplicate=0)
