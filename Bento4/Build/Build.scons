import sys
import os
import imp
from glob import glob

#######################################################
# reusable functions and data structures
#######################################################
def LoadTool(name, env, **kw):
    config_path = GetBuildPath('#/Build/Tools/SCons')
    file, path, desc = imp.find_module(name, [config_path])
    module = imp.load_module(name, file, path, desc)
    module.generate(env, **kw)

def GlobSources(dir, patterns):
    root = GetBuildPath('#'+SOURCE_ROOT)+'/'+dir+'/'
    files = []
    for pattern in patterns:
        files += glob(root+pattern)
    return [dir+'/'+os.path.basename(x) for x in  files]

def GetDirPath(dir):
    return '#'+SOURCE_ROOT+'/'+dir
    
def DeclareBuildDir(dir):
    env.BuildDir(dir, GetDirPath(dir), duplicate=0)

def GetModule(name):
    return Modules[name]
    
def GetIncludeDirs(modules, exclude=None):
    dirs = []
    for module in Split(modules):
        if Modules.has_key(module) and not module == exclude:
            dirs += Modules[module].GetIncludeDirs()
        else:
            dirs += [GetDirPath(module)]
    return dirs

def GetLibraries(modules):
    return [GetModule(module).GetLibraries() for module in Split(modules)]

Modules = {}
class Module:
    def __init__(self, name, included_modules = [], linked_modules = []):
        self.included_modules = included_modules
        self.linked_modules   = linked_modules
        self.product          = []

    def GetLibraries(self):
        return self.product+GetLibraries(self.linked_modules)
        
    def GetIncludeDirs(self):
        return GetIncludeDirs(self.included_modules, self.name)
    
class LibraryModule(Module):
    def __init__(self, name, 
                 build_source_dirs, 
                 build_source_pattern=['*.c', '*.cpp'], 
                 build_include_dirs = [], 
                 included_modules = [], 
                 linked_modules = []) :
        Module.__init__(self, name, Split(included_modules)+Split(build_source_dirs), linked_modules)
        self.env                = env.Copy()
        self.name               = name
        self.build_source_dirs  = build_source_dirs
        self.build_include_dirs = build_include_dirs
        
        # store this new object in the module dictionary
        Modules[name] = self
                
        # for each source dir to build, create a BuildDir
        # to say where we want the object files to be built,
        # and compute the list of source files to build
        sources = []
        for dir in Split(self.build_source_dirs):
            DeclareBuildDir(dir)
            sources += GlobSources(dir, build_source_pattern)
            
        # calculate our build include path
        cpp_path = GetIncludeDirs(Split(build_include_dirs) + Split(build_source_dirs) + Split(included_modules))

        # calculate our preprocessor defines for this module
        cpp_defines={}
        
        # the product is a library
        self.env.AppendUnique(CPPDEFINES=cpp_defines)
        self.env.AppendUnique(CPPPATH=cpp_path)
        self.product = self.env.Library(target=name, source=sources)
        Alias(name, self.product)
        
def Application(name, source_dir, extra_deps=[]):
    DeclareBuildDir(source_dir)
    sdk = ['CoreLib', 'SystemLib'] + Split(extra_deps)
    libs = GetLibraries(sdk)
    cpp_path = GetIncludeDirs(sdk)
    
    prog = env.Program(name.lower(), 
                       GlobSources(source_dir, ['*.cpp']), 
                       LIBS=libs, CPPPATH=cpp_path)
    Alias(name, prog)
    
#######################################################
# Main Build
#######################################################
Import("env")
SOURCE_ROOT='Source/C++'

### try to read in any target specific configuration
target_config_file = env.GetBuildPath('#/Build/Targets/'+env['target']+'/Config.scons')
if os.path.exists(target_config_file):
    # Load the target-specific config file    
    execfile(target_config_file)

#######################################################
# modules
#######################################################
LibraryModule(name               = 'CoreLib', 
              build_source_dirs  = ['Core', 'Crypto', 'MetaData'],
              included_modules   = 'Config')
           
LibraryModule(name               = 'SystemLib', 
              build_source_dirs  = 'System/StdC',
              included_modules   = 'CoreLib')
 
LibraryModule(name               = 'CodecsLib', 
              build_source_dirs  = ['Codecs'],
              included_modules   = 'CoreLib')

for name in ['Mp4Dump', 'Mp4Info', 'Mp4Edit', 'Mp4Encrypt', 'Mp4Decrypt', 'Mp4Tag', 'Mp4Extract', 'Mp4RtpHintInfo', 'Mp42Aac']:       
    Application(name, source_dir='Apps/'+name)

Application('Aac2Mp4', source_dir='Apps/Aac2Mp4', extra_deps='CodecsLib')
Application('CryptoTest', source_dir='Test/Crypto')